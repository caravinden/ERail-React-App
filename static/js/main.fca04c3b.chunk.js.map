{"version":3,"sources":["component/header/header.js","component/reservation/reservation.js","component/reservation/reserve.js","component/reservation/lists.js","component/reservation/searchlist.js","container/App.js","serviceWorker.js","index.js"],"names":["header","props","className","appHeader","reservation","label","type","value","onChange","change","reserve","Object","keys","map","key","i","bind","lists","trainName","trainNo","date","searchlist","details","train","index","TrainName","TrainNumber","App","onChangeHandler","id","event","state","target","setState","onSearchHandler","showList","showSearchList","From","To","Date","Type","this","onClick","style","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAKeA,G,YAFA,SAAEC,GAAF,OAAa,yBAAKC,UAAU,UAAf,IAA2BD,EAAME,UAAjC,OCSbC,G,MATK,SAAEH,GAClB,OACI,0BAAMC,UAAY,eACd,kCAASD,EAAMI,MAAf,MACA,2BAAOC,KAAM,OAAOC,MAAUN,EAAMM,MAAQC,SAAaP,EAAMQ,YCK5DC,EATC,SAAET,GAAF,OAAaU,OAAOC,KAAMX,EAAMG,aAAcS,IAAM,SAAEC,EAAKC,GACvE,OAAO,kBAAC,EAAD,CACHV,MAAUS,EACVA,IAAQA,EACRP,MAAUN,EAAMG,YAAaU,GAC7BL,OAAWR,EAAMQ,OAAOO,U,EAAY,CAAEF,aCK/BG,G,MAVD,SAAEhB,GACZ,OACI,yBAAKC,UAAU,SACX,0BAAMA,UAAW,cAAjB,IAAiCD,EAAMiB,UAAvC,KACA,0BAAMhB,UAAW,YAAjB,IAA+BD,EAAMkB,SACrC,0BAAMjB,UAAW,cAAjB,IAAiCD,EAAMmB,SCIpCC,EATI,SAAEpB,GAAF,OAAaA,EAAMqB,QAAQT,IAAK,SAAEU,EAAOC,GACxD,OAAO,kBAAC,EAAD,CACHN,UAAcK,EAAME,UACpBN,QAAYI,EAAOG,YACnBN,KAAS,cACTN,IAAQU,O,gOC6DDG,E,YA9Db,WAAa1B,GAAS,IAAD,8BACnB,4CAAOA,KAmBT2B,gBAAkB,SAAEC,EAAIC,GACtB,IAAMhB,EAAMe,EAAGf,IACTV,E,qVAAW,IAAO,EAAK2B,MAAM3B,aACnCA,EAAaU,GAAQgB,EAAME,OAAOzB,MAElC,EAAK0B,SAAU,CACb7B,YAAcA,KA1BG,EA6BrB8B,gBAAkB,WAChB,IAAMC,EAAW,EAAKJ,MAAMK,eAC5B,EAAKH,SAAU,CACbG,gBAAiBD,KA9BnB,EAAKJ,MAAQ,CACX5B,UAAW,uBACXC,YAAc,CACZiC,KAAM,WACNC,GAAI,UACJC,KAAM,cACNC,KAAM,MAERJ,gBAAgB,EAChBnB,MAAQ,CACN,CAAEQ,UAAW,iBAAkBC,YAAa,OAC5C,CAAED,UAAW,iBAAkBC,YAAa,OAC5C,CAAED,UAAW,oBAAqBC,YAAa,OAC/C,CAAED,UAAW,iBAAkBC,YAAa,SAGhD,EAAKE,gBAAkB,EAAKA,gBAAgBZ,KAArB,gBAlBJ,E,sEAqCnB,IAAIC,EAAQ,KASZ,OAJIwB,KAAKV,MAAMK,iBACbnB,EAAQ,kBAAC,EAAD,CAAYK,QAAYmB,KAAKV,MAAMd,MAAOG,KAAQ,kBAI1D,6BACE,kBAAC,EAAD,CAAQlB,UAAayB,EAAKxB,UAAcsC,KAAKV,MAAM5B,YAAa,6BAChE,6BACE,kBAAC,EAAD,CAAcC,YAAgBqC,KAAKV,MAAM3B,YAAcK,OAAWgC,KAAKb,kBACvE,4BAAQc,QAAYD,KAAKP,iBAAzB,aAEF,yBAAKS,MAfS,CAChBC,UAAW,SAeL3B,Q,GAvDM4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fca04c3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nconst header = ( props ) => <div className='header'> { props.appHeader } </div>\r\n\r\nexport default header;","import React from 'react';\r\nimport './reservation.css';\r\n\r\nconst reservation = ( props ) => {\r\n    return (\r\n        <span className = 'reservation'>\r\n            <span> { props.label }: </span>\r\n            <input type= 'text' value = { props.value } onChange = { props.change }/>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default reservation;","import React from 'react';\r\nimport Reservation from './reservation';\r\n\r\nconst reserve = ( props ) => Object.keys( props.reservation ).map ( ( key, i ) => {\r\n    return <Reservation \r\n        label = { key }\r\n        key = { key }\r\n        value = { props.reservation[ key ] }\r\n        change = { props.change.bind( this, { key }) }\r\n    />\r\n})\r\n\r\nexport default reserve;","import React from 'react';\r\nimport './lists.css';\r\n\r\nconst lists = ( props ) => {\r\n    return (\r\n        <div className='lists'>\r\n            <span className= 'train-name'> { props.trainName } </span>\r\n            <span className= 'train-no'> { props.trainNo }</span>\r\n            <span className= 'train-date'> { props.date  }</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default lists;","import React from 'react';\r\nimport Lists from './lists';\r\n\r\nconst searchlist = ( props ) => props.details.map( ( train, index ) => {\r\n    return <Lists \r\n        trainName = { train.TrainName }\r\n        trainNo = { train. TrainNumber }\r\n        date = { '03-sept2019' }\r\n        key = { index }\r\n    />\r\n})\r\n\r\nexport default searchlist;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from '../component/header/header';\nimport Reservation from '../component/reservation/reserve';\nimport Searchlist from '../component/reservation/searchlist';\n\nclass App extends Component {\n  constructor( props ) {\n    super( props )\n    this.state = {\n      appHeader: 'Welcome to erail app',\n      reservation : {\n        From: 'Banglore',\n        To: 'Chennai',\n        Date: '30-aug-2019',\n        Type: 'SL'\n      },\n      showSearchList: false,\n      lists : [\n        { TrainName: 'Kaveri Express', TrainNumber: 12345 },\n        { TrainName: 'Cheran Express', TrainNumber: 12345 },\n        { TrainName: 'Verudavan Express', TrainNumber: 12345 },\n        { TrainName: 'Lalbag Express', TrainNumber: 12345 }\n      ]\n    }\n    this.onChangeHandler = this.onChangeHandler.bind( this);\n  }\n  onChangeHandler = ( id, event ) => {\n    const key = id.key;\n    const reservation = {...this.state.reservation };\n    reservation[ key ] = event.target.value;\n\n    this.setState( {  \n      reservation : reservation\n    })\n  }\n  onSearchHandler = () => {\n    const showList = this.state.showSearchList;\n    this.setState( {\n      showSearchList: !showList\n    })\n  }\n\n  render() {\n    let lists = null;\n    const listStyle = {\n      marginTop: '12px'\n    };\n\n    if( this.state.showSearchList ) {\n      lists = <Searchlist details = { this.state.lists} date = {'03-sept-2019'}/>\n    }\n\n    return ( \n      <div>\n        <Header className = {App} appHeader = { this.state.appHeader }/><br/>\n        <div>\n          <Reservation  reservation = { this.state.reservation } change = { this.onChangeHandler }/>\n          <button onClick = { this.onSearchHandler }> Search </button>\n        </div>\n        <div style = { listStyle }>\n          { lists }\n        </div>\n      </div> \n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}